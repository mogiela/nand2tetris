// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

	Mux16(a = instruction, b = ALUout, sel = instruction[15], out = toA);

	And(a = instruction[15], b = instruction[12], out = AorM);
	Mux16(a = Aout, b = inM, sel = AorM, out = inALUAM);

	//load if d2 and c instruction
	Not(in = instruction[15], out = notAinst);
	Or(a = notAinst, b = instruction[4], out = Dload);
	DRegister(in = ALUout, load = Dload, out = inALUD);

	//load if (c instruction and d1) or a instruction
	Or(a = notAinst, b = instruction[5], out = Aload);
	ARegister(in = toA, load = Aload, out = Aout, out[0..14] = addressM);

    And(a = instruction[15], b = instruction[11], out = zxIn);
    And(a = instruction[15], b = instruction[10], out = nxIn);
    Or(a = notAinst, b = instruction[9], out = zyIn);
    Or(a = notAinst, b = instruction[8], out = nyIn);
    And(a = instruction[15], b = instruction[7], out = fIn);
    And(a = instruction[15], b = instruction[6], out = noIn);

	ALU(x = inALUD, y = inALUAM, zx = zxIn,
		  			  			 nx = nxIn,
								 zy = zyIn,
								 ny = nyIn,
								 f  = fIn,
								 no = noIn,
		out = ALUout, out = outM, zr = ALUzero, ng = ALUneg);

	// check if j1(= outALU needs to be negative) and ng(= outALU is negative)
	And(a = instruction[2], b = ALUneg, out = jmpsuit1);

	// check if j2(= outALU needs to be 0) and zr(= outALU is 0)
	And(a = instruction[1], b = ALUzero, out = jmpsuit2);

	// check if j3(= outALU needs to be positive) and zr+ng=isPos=0(= outALU is positive)
	Not(in = ALUzero, out = notZero);
	Not(in = ALUneg, out = notNeg);
	And(a = notZero, b = notNeg, out = isPos);
	And(a = instruction[0], b = isPos, out = jmpsuit3);

	Or(a = jmpsuit1, b = jmpsuit2, out = jmpsuittmp);
	Or(a = jmpsuittmp, b = jmpsuit3, out = jmpsuitfinal);

	And(a = instruction[15], b = jmpsuitfinal, out = PCload);

	Not(in = PCload, out = PCinc);
	
	
	PC(in = Aout, load = PCload, inc = PCinc, reset = reset, out[0..14] = pc);

	And(a = instruction[15], b = instruction[3], out = writeM);

	






}