/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
	 
	Mux16(a = instruction, b = ALUout, sel = instruction[15], out = toA);

	And(a = instruction[15], b = instruction[12], out = AorM);
	Mux16(a = Aout, b = inM, sel = AorM, out = inALUAM);

	//load if d2 and c instruction
	Not(in = instruction[15], out = notAinst);
	Or(a = notAinst, b = instruction[4], out = Dload);
	DRegister(in = ALUout, load = Dload, out = inALUD);

	//load if (c instruction and d1) or a instruction
	Or(a = notAinst, b = instruction[5], out = Aload);
	ARegister(in = toA, load = Aload, out = Aout, out[0..14] = addressM);

    And(a = instruction[15], b = instruction[11], out = zxIn);
    And(a = instruction[15], b = instruction[10], out = nxIn);
    Or(a = notAinst, b = instruction[9], out = zyIn);
    Or(a = notAinst, b = instruction[8], out = nyIn);
    And(a = instruction[15], b = instruction[7], out = fIn);
    And(a = instruction[15], b = instruction[6], out = noIn);


    Or(a = notAinst,b = instruction[14],out = instruction8);
    Or(a = notAinst,b = instruction[13],out = instruction7);


    ExtendAlu(x = inALUD, y = inALUAM, instruction[8] = instruction8,
								   	   instruction[7] = instruction7,
									   instruction[6] = true,
								   	   instruction[5] = zxIn,
								   	   instruction[4] = nxIn,
								   	   instruction[3] = zyIn,
								   	   instruction[2] = nyIn,
								   	   instruction[1] = fIn,
								   	   instruction[0] = noIn,
			  out = ALUout, out = outM,zr = ALUzero,ng = ALUneg);

	// check if j1(= outALU needs to be negative) and ng(= outALU is negative)
	And(a = instruction[2], b = ALUneg, out = jmpsuit1);

	// check if j2(= outALU needs to be 0) and zr(= outALU is 0)
	And(a = instruction[1], b = ALUzero, out = jmpsuit2);

	// check if j3(= outALU needs to be positive) and zr+ng=isPos=0(= outALU is positive)
	Not(in = ALUzero, out = notZero);
	Not(in = ALUneg, out = notNeg);
	And(a = notZero, b = notNeg, out = isPos);
	And(a = instruction[0], b = isPos, out = jmpsuit3);

	Or(a = jmpsuit1, b = jmpsuit2, out = jmpsuittmp);
	Or(a = jmpsuittmp, b = jmpsuit3, out = jmpsuitfinal);

	And(a = instruction[15], b = jmpsuitfinal, out = PCload);

	Not(in = PCload, out = PCinc);
	
	
	PC(in = Aout, load = PCload, inc = PCinc, reset = reset, out[0..14] = pc);

	And(a = instruction[15], b = instruction[3], out = writeM);

	
}
