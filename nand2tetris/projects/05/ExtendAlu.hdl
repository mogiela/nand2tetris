/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
	 PARTS:
	 ALU(x = x, y = y, zx = instruction[5],
	 	   	 	  	   nx = instruction[4],
					   zy = instruction[3],
					   ny = instruction[2],
					   f  = instruction[1],
					   no = instruction[0],
	 out = ALUout);

	 Mul(a = x, b = y, out = mulan);

	 Mux16(a = y, b = x, sel = instruction[4], out = INshift);
	 ShiftLeft(in = INshift, out = Lshift);
	 ShiftRight(in = INshift, out = Rshift);
	 Mux16(a = Rshift, b = Lshift, sel = instruction[5], out = OUTshift);
	
	 Mux4Way16(a = mulan, b = OUTshift, c = mulan, d = ALUout, sel = instruction[7..8],
	 		   out = out, out[15] = ng, out[0..7] = tmp1, out[8..15] = tmp2);

	 Or8Way(in = tmp1, out = mushu1);
	 Or8Way(in = tmp2, out = mushu2);
	 Or(a = mushu1, b = mushu2, out = NOTzr);
	 Not(in = NOTzr, out = zr);
}

