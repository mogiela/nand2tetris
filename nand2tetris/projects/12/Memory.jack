// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static array ram, heap;

    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heap = 2048;
		let freelist = 2048;
		let heap[0] = 0;
		let heap[1] = 14335;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
		
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var Array search,block;
		var int sizeP2;
		let sizeP2 = size + 2;
		let search = freelist;
		
		if (freelist[0] = 0){
			if (~(sizeP2 > search[1])){
				let block = search + search[1] - sizeP2;
				let block[0] = 0;
				let block[1] = size;
				let search[1] = search[1] - sizeP2;
				return block[2];
			}
		}		

		while (~(search[0] = 0)){
			if (~(sizeP2 > search[1])){
				let block = search + search[1] - sizeP2;
				let block[0] = 0;
				let block[1] = size;
				let search[1] = search[1] - sizeP2;
				return block[2];
			}
			search = search[0];
		}
		
		return null;
		
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var Array temp;
		
		let temp = o - 2;
		let temp[0] = freelist;
		let freelist = temp;
		return;
    }    
}