// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */

class Memory {
	  static Array ram, heap;
    static boolean dbg;

    /** Initializes the class. */
    function void init() {
        let dbg = true;
		    let ram = 0;
		    let heap = 2048;
		    let heap[1] = 16382;    // next block of heap is already across the edge
		    let heap[0] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		    return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		    let ram[address] = value;
		    return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {

        var Array curBase;

        if(size<1){
            do Sys.error(5);
            return null;
        }

        let curBase=2048;
        // find first block with enough space
        while((curBase[0]<size) & (curBase < 16382)){
            let curBase = curBase[1];
        }
        // make sure we didn't leak into the screen area
        if((curBase)>16383){
            do Sys.error(6);
            return null;
        }

        if(curBase[0]>(size+2)){
            // write the size of the next heap
            let curBase[size+2] = curBase[1] - size - 2;
            let curBase[size+3] = curBase[1];
            let curBase[1] = curBase + size + 2;
        }
        // write 0 to signal there is no empty space in this block
        let curBase[0]=0;
        return curBase+2;
    }


    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array cur, next;
        let cur = o-2;
        let next = cur[1];
        if (next[0] = 0){       // next is still occupied
            let cur[0] = next - cur - 2; // just write the size of the block (empty space)
        }
        else{                   // we can combine the blocks
            // next[0] is the next block size, next - cur is the size we added
            let cur[0] = next[0] + next - cur;
            let cur[1] = next[1];
        }
        return;
    }
}
