// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
		    let twoToThe = Array.new(16);
        let twoToThe[0]= 1;
        let twoToThe[1]= 2;
        let twoToThe[2]= 4;
        let twoToThe[3]= 8;
        let twoToThe[4]= 16;
        let twoToThe[5]= 32;
        let twoToThe[6]= 64;
        let twoToThe[7]= 128;
        let twoToThe[8]= 256;
        let twoToThe[9]= 512;
        let twoToThe[10]=1024;
        let twoToThe[11]=2048;
        let twoToThe[12]=4096;
        let twoToThe[13]=8192;
        let twoToThe[14]=16384;
        let twoToThe[15]=~32767;
        return;
    }


    /** Returns the absolute value of x. */
    function int abs(int x) {
		    if (x < 0){
			      return -x;
		    }
		    return x;
    }

	  function boolean bit(int x, int i) {
		    if ((x & twoToThe[i]) = 0) {
			      return false;
        }
		    return true;
	  }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		    var int sum, shiftedX, i;
		    let shiftedX = x;
		    while (i < 16){
			      if (Math.bit(y,i)){
				        let sum = sum + shiftedX;
			      }
			      let i = i + 1;
			      let shiftedX = shiftedX + shiftedX;
		    }
		    return sum;
    }

	  function int divideHelper(int x, int y){
        var int q;
        var int multYQ;
		    if (y > x | y < 0){
			      return 0;
		    }
		    let q  = Math.divideHelper(x,y + y);
		    let multYQ = Math.multiply(q + q, y);
		    if ((x - multYQ) < y){
			      return q +q;
		    }
		    return q + q + 1;
	  }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		    var int q;
		    var boolean signX, signY;
		    let signX = false;
		    let signY = false;
		    if (x < 0){
			      let x = Math.abs(x);
			      let signX = true;
		    }
		    if (y < 0){
			      let y = Math.abs(y);
			      let signY = true;
		    }
		    let q = Math.divideHelper(x,y);
		    if ((signX & signY) | (~signX & ~signY)){
			      return q;
		    }
		    return -q;

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		    var int y, i, condi, tion;
		    let i = 7;
		    while (~(i < 0)){
			      let condi = y + twoToThe[i];
			      let tion = Math.multiply(condi,condi);
			      if( ~(tion > x) & ~(tion < 0)){
				        let y = condi;
			      }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		    if (a > b){
			      return a;
		    }
		    return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		    if (a < b){
			      return a;
		    }
		    return b;
    }

	  function int modulo(int num, int mod){
		    return num - (mod * (num/mod));
    }
}
