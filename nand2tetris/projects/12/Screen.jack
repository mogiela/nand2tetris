// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {

    static boolean isBlack;
    static int mod16;
    static Array twoToThe;
    static int screen_base;
    /** Initializes the Screen. */
    function void init() {
        let isBlack = true;
        let mod16 = 15;
        let screen_base = 16384;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10]= 1024;
        let twoToThe[11]= 2048;
        let twoToThe[12]= 4096;
        let twoToThe[13]= 8192;
        let twoToThe[14]= 16384;
        let twoToThe[15]=~32767;

        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        while (i < 8192) {
            do Memory.poke(i+screen_base, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let isBlack = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int raddr;
        var int baddr;
        // fix this with fast division
        let raddr = screen_base + (Math.fastBinaryMulter(y, 5)) + (x/16);
        do Memory.poke(raddr, Screen.setBitOfNum(Memory.peek(raddr), x & mod16, isBlack));
        return;
    }

    function int setBitOfNum(int num, int bitPos, boolean bitVal) {
        // bitPos should be smaller than 16 but just in case we take its mod16
        if (bitVal){
            return num | twoToThe[bitPos&mod16];
        }
        else{
            return num & (~twoToThe[bitPos&mod16]);
        }
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int debugC;
        var int dx, dy, curX, curY, targetX, targetY, diff, raddr, curBlock;
        var boolean dirLeft, dirUp;
        let dx = x2-x1;
        let dy = y2-y1;
        let raddr = screen_base + (Math.fastBinaryMulter(y1, 5)) + (x1/16);

        if (dy < 0){ // going down-top
            let dy = -dy;
            let dirUp = true;
        }
        if (dx < 0){ // going right-left
            let dx = -dx;
            let dirLeft = true;
        }

        if (dy = 0){  // straight horizontal line
            if (dirLeft){
                if (~((x1&mod16)=mod16)){ // not in a block start
                    let curBlock = Memory.peek(raddr);
                    while(~ ((x1-curX)&mod16 = mod16)) { // advance until reaching a new block
                        let curBlock = Screen.setBitOfNum(curBlock, x1-curX, isBlack);
                        let curX = curX + 1;
                        if(curX>dx){ do Memory.poke(raddr, curBlock); return;}
                    }
                    do Memory.poke(raddr, curBlock);
                    let raddr = raddr - 1;
                }
                while((curX+16<dx)){ // if we can fill a full block, do it
                    do Memory.poke(raddr, isBlack);
                    let raddr = raddr - 1;
                    let curX = curX + 16;
                }
                let curBlock = Memory.peek(raddr); // there is less than a block to go
                while(~(curX > dx)){ // advance until reaching dx
                    let curBlock = Screen.setBitOfNum(curBlock, x1-curX, isBlack);
                    let curX = curX + 1;
                }
                do Memory.poke(raddr, curBlock);
                return;     // doneeee...
            }
            else{  // going right
                if (~(x1&mod16=0)){ // not in a block start
                    let curBlock = Memory.peek(raddr);
                    while(~ ((x1+curX)&mod16=0) ) { // advance until reaching a new block
                        let curBlock = Screen.setBitOfNum(curBlock, x1+curX, isBlack);
                        let curX = curX + 1;
                        if(curX>dx){ do Memory.poke(raddr, curBlock); return;}
                    }
                    do Memory.poke(raddr, curBlock);
                    let raddr = raddr + 1;
                }
                while((curX+16<dx)){ // if we can fill a full block, do it
                    do Memory.poke(raddr, isBlack);
                    let raddr = raddr + 1;
                    let curX = curX + 16;
                }
                let curBlock = Memory.peek(raddr); // there is less than a block to go
                while(~(curX > dx)){ // advance until reaching dx
                    let curBlock = Screen.setBitOfNum(curBlock, x1+curX, isBlack);
                    let curX = curX + 1;
                }
                do Memory.poke(raddr, curBlock);
                return;     // doneeee...
            }
        }


        let curBlock = Memory.peek(raddr);
        while ((curX < dx) | (curY < dy)){ // imagining we're going right-down but fixing it later by getting the correct block
            // draw the pixel to the block:
            if (dirLeft){
                //draw pixel x-curX , y-curY
                let curBlock = Screen.setBitOfNum(curBlock, (x1-curX), isBlack);
            }
            else{
                //draw pixel x+curX , y-curY
                let curBlock = Screen.setBitOfNum(curBlock, (x1+curX), isBlack);
            }

            // update diff and curBlock
            if(~(diff > 0)){
                let curY = curY + 1;
                let diff = diff + dx;
                //write number to memory, decrease/increase raddr by 32, get new number.
                do Memory.poke(raddr, curBlock);
                if (dirUp){
                    let raddr = raddr - 32;
                }
                else{
                    let raddr = raddr + 32;
                }

                let curBlock = Memory.peek(raddr);
            }
            else{
                let curX = curX + 1;
                let diff = diff - dy;
                if (dirLeft){
                    // check if x%16 is 15
                    if((x1-curX)&mod16 = mod16){
                        // write number to memory, decrease raddr by 1, get new number
                        do Memory.poke(raddr, curBlock);
                        let raddr = raddr - 1;
                        let curBlock = Memory.peek(raddr);
                    }
                }else{
                    // check if x%16 is 0:
                    if((x1+curX)&mod16 = 0){
                        // write number to memory, increase raddr by 1, get new number
                        do Memory.poke(raddr, curBlock);
                        let raddr = raddr + 1;
                        let curBlock = Memory.peek(raddr);
                    }
                }
            }
        }
        do Memory.poke(raddr, curBlock);
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)){
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        /** calculated according to the midpoint circle algorithm
         *  with a few modifications to look a bit more like the school solution.
         */
        var int x, y, err;
        let x = r;

        do Screen.drawLine(cx-x, cy, cx+x, cy);
        while(~(x < y)){

            do Screen.drawLine(cx-y-1,cy+x , cx+y,cy+x);
            do Screen.drawLine(cx-x-1,cy+y , cx+x,cy+y);
            do Screen.drawLine(cx-x-1,cy-y , cx+x,cy-y);
            do Screen.drawLine(cx-y-1,cy-x , cx+y,cy-x);

            if (~(err > 0)){ // y += 1; err += 2y + 1
                let y = y + 1;
                let err = err + y + y + 1;
            }
            else{ // x -= 1; err -= 2x + 1
                let x = x - 1;
                let err = err - x - x - 1;
            }
        }
        return;
    }

    /* return a number with 0's in all bits except the pos bit, which is one */
    function int getBitSetter(int pos){
        var int bs, i;
        let bs = 1;
        while (i < pos){
            let bs = bs + 1;
        }
        return bs;
    }




}
